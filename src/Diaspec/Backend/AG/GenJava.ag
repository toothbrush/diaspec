imports
{
import Language.Java.Syntax
import Data.Maybe (fromJust)
import Data.Char (toLower)

import Diaspec.JTypeUtils
}

{
type TyEnv = [(String, DType)]
}

----------------------------------
-- Java generation
----------------------------------

-- TODO for every reference, check that it's implemented somewhere.
-- TODO split the two AGs: for pprinting and for compilation.
attr Specification
  syn runner   :: {CompilationUnit} -- AbstractRunner class
                  
attr Specification Declarations
  syn genJ   :: {[CompilationUnit]}

attr Declarations Declaration
  inh pkg       :: {Maybe PackageDecl}  -- the package name, derived from specs filename
  inh tyEnv     :: {TyEnv} -- environment to keep track of output types of components.
  syn initStmts :: {[BlockStmt]}
  syn subsStmts :: {[BlockStmt]}

attr Declarations
  syn allTypes :: {TyEnv}
  syn deployMethods :: {[Decl]}
  syn fieldDecls :: {[Decl]} -- the field for in Runner

attr Declaration
  syn genJ         :: {CompilationUnit}
  syn deployMethod :: {Decl} -- attaching deployments
  syn name         :: {String}
  syn myType       :: {TyEnv}
  syn fieldDecl :: {Decl} -- the field for in Runner

attr DType
  syn javaType :: {RefType}


attr ContextInteraction
  inh ty      :: {DType}

attr ContextInteraction ControllerInteraction
  syn classImplements :: {[RefType]}
  inh tyEnv           :: {TyEnv} -- environment of output types of components.
  inh thisCName       :: {String}
  syn methods         :: {[Decl]}
  syn subsStmts       :: {[BlockStmt]}

attr Publish
  inh ty      :: {DType} -- turn it into a Maybe, maybe.
  syn ret     :: {Type}
  syn notify  :: {BlockStmt}

attr Get
  inh tyEnv      :: {TyEnv}
  syn args       :: {[Exp]}
  syn fparam     :: {[(RefType, String)]}
  syn initProxy  :: {[BlockStmt]}
  syn destrProxy :: {[BlockStmt]}
  syn proxyClass :: {[Decl]}


sem Specification
  | S  lhs.genJ   = @ds.genJ 
       ds.tyEnv   = @ds.allTypes
       loc.pkg    = pack @name
       ds.pkg     = @loc.pkg
       lhs.runner = clsRunner @loc.pkg
                    ((initFunc (@ds.initStmts ++ @ds.subsStmts)):
                       (@ds.fieldDecls ++ @ds.deployMethods))

sem Declarations
  | Cons lhs.genJ          = @hd.genJ : @tl.genJ -- TODO list is reversing?
         lhs.deployMethods = @hd.deployMethod : @tl.deployMethods
         lhs.fieldDecls    = @hd.fieldDecl : @tl.fieldDecls
         lhs.allTypes      = @hd.myType    ++ @tl.allTypes
         lhs.initStmts     = @hd.initStmts ++ @tl.initStmts
         lhs.subsStmts     = @hd.subsStmts ++ @tl.subsStmts
  | Nil  lhs.genJ          = []
         lhs.allTypes      = []
         lhs.deployMethods = []
         lhs.fieldDecls    = []
         lhs.initStmts     = []
         lhs.subsStmts     = []


sem DType
  | DBool    lhs.javaType = jtype @self
  | DInt     lhs.javaType = jtype @self
  | DPicture lhs.javaType = jtype @self
  | DString  lhs.javaType = jtype @self

sem Declaration
  | Source     lhs.deployMethod = deployMethod @name (instanceVar @name) True
               lhs.fieldDecl    = fieldDecl    @name (instanceVar @name) True
               lhs.name         = @name
               lhs.initStmts    = [addtoList "srcs" (instanceVar @name)]
               lhs.subsStmts    = []
  | Action     lhs.deployMethod = deployMethod @name (instanceVar @name) True
               lhs.fieldDecl    = fieldDecl    @name (instanceVar @name) True
               lhs.name         = @name
               lhs.initStmts    = [addtoList "acts" (instanceVar @name)]
               lhs.subsStmts    = []
  | Context    lhs.deployMethod = deployMethod @name (instanceVar @name) False
               lhs.fieldDecl    = fieldDecl    @name (instanceVar @name) False
               lhs.name         = @name
               lhs.initStmts    = initComponent @name (instanceVar @name) ++
                                  [addtoList "ctxs" (instanceVar @name)]
               lhs.subsStmts    = @contr.subsStmts
  | Controller lhs.deployMethod = deployMethod @name (instanceVar @name) False
               lhs.fieldDecl    = fieldDecl    @name (instanceVar @name) False
               lhs.name         = @name
               lhs.initStmts    = initComponent @name (instanceVar @name) ++
                                  [addtoList "ctrls" (instanceVar @name)]
               lhs.subsStmts    = @contr.subsStmts

sem Declaration
  | Source     lhs.genJ   = clsSource @lhs.pkg @name @ty.javaType
               lhs.myType = [(@name, @ty.self)]
  | Action     lhs.genJ   = clsAction @lhs.pkg @name @ty.javaType
               lhs.myType = []
  | Context    lhs.genJ   = clsContext @lhs.pkg @name
                            @contr.classImplements -- implements, which depend on IC.
                            (jtype @ty.self) @contr.methods
               contr.ty   = @ty.self
               lhs.myType = [(@name, @ty.self)]
               contr.thisCName = @name
  | Controller lhs.genJ   = clsController @lhs.pkg @name
                            @contr.classImplements @contr.methods
               lhs.myType = []
               contr.thisCName = @name

-- | influences name of member method, 
sem ContextInteraction
  | WhenProvided lhs.classImplements = [classRef [(Ident "Context",[])],
                                        classRef [(Ident "Subscriber",
                                                   [ActualType @loc.inType])]]
                 loc.inType = jtype (fromJust $ lookup @name @lhs.tyEnv) 
                 loc.methName = "on" ++ @name ++ "Provided"
                 lhs.subsStmts = (instanceVar @lhs.thisCName)
                                 `subscribesTo`
                                 (instanceVar @name)
                 lhs.methods= [ methodDecl protectedAbstract (Just @pub.ret) --return
                                @loc.methName
                                (funcparams $ (@loc.inType, "newValue") :  @get.fparam)
                                Nothing
                              , methodDecl publicFinal Nothing
                                "trigger"
                                (funcparams$ (@loc.inType, "value") : [])
                                (stmts $
                                  @get.initProxy ++
                                  [ lVar @pub.ret "v"
                                     (Just (methInvInit [@loc.methName]
                                            (varAccess "value" : @get.args)))]
                                  ++ @get.destrProxy ++
                                  [@pub.notify])
                              ]
                              ++ @get.proxyClass
                              ++ runnerInit True
  | WhenRequired lhs.classImplements = [classRef [(Ident "Context",[])]]
                 loc.methName = "when" ++ @lhs.thisCName ++ "Required"
                 loc.myType  = jtype . fromJust $ lookup @lhs.thisCName @lhs.tyEnv
                 lhs.subsStmts = []
                 lhs.methods= [ methodDecl protectedAbstract
                                (Just$ RefType @loc.myType)
                                --return TODO simple inh instead of lookup of myType?
                                @loc.methName (funcparams @get.fparam)
                                Nothing
                              , methodDecl [Protected, Final]
                                (Just$ RefType @loc.myType) "requireValue"
                                [] -- no args
                                (stmts$
                                 @get.initProxy ++
                                 [lVar (RefType @loc.myType) "v"
                                  (Just (methInvInit [@loc.methName] @get.args))] ++
                                 @get.destrProxy ++
                                 [ BlockStmt (Return (Just (varAccess "v")))])
                              ] ++ @get.proxyClass
                                ++ runnerInit True

sem ControllerInteraction
  | WhenContext lhs.classImplements = [classRef [(Ident "Controller",[])],
                                       classRef [(Ident "Subscriber",
                                                  [ActualType @loc.inType])]]
                loc.inType = jtype (fromJust $ lookup @name @lhs.tyEnv) 
                loc.methName = "on" ++ @name ++ "Provided"
                loc.vName  = "local" ++ @act ++ "Proxy"
                loc.proxyName = @act ++ "Proxy"
                lhs.subsStmts = (instanceVar @lhs.thisCName)
                                `subscribesTo` (instanceVar @name)
                lhs.methods= [ methodDecl protectedAbstract Nothing --return
                               @loc.methName
                               (funcparams $ (@loc.inType, "newValue") :
                                              @loc.proxyparam)
                               Nothing
                             , methodDecl publicFinal Nothing
                               "trigger"
                               (funcparams [(@loc.inType, "value")])
                               (stmts $
                                 @loc.initProxy ++
                                 -- call on..Provided
                                 [BlockStmt (methInv [@loc.methName]
                                  [varAccess "value"
                                  ,varAccess @loc.vName])] ++
                                 @loc.destrProxy)
                             ] ++ @loc.proxyClass
                               ++ runnerInit True
                loc.proxyparam = [(classRef [(Ident @loc.proxyName, [])]
                                 , @loc.vName)]
                loc.initProxy  = proxyOn  @loc.proxyName @loc.vName
                loc.destrProxy = proxyOff @loc.proxyName @loc.vName
                loc.proxyClass = [proxyClDo @act @loc.proxyName
                                  (funcparams [(@loc.inType, "value")])]


-- | determines the return type of a context.
sem Publish
  | AlwaysPublish    lhs.ret    = RefType @loc.naked
                     loc.naked  = jtype @lhs.ty
                     lhs.notify = BlockStmt (methInv ["notify"] [varAccess "v"])
  | MaybePublish     lhs.ret    = RefType$ wrapMaybe @loc.naked
                     loc.naked  = jtype @lhs.ty
                     lhs.notify = BlockStmt
                                  (IfThen ((varAccess "v") `InstanceOf` 
                                           (classRef [(Ident "Just",[])]))
                                   (methInv ["notify"]
                                    [FieldAccess
                                     (PrimaryFieldAccess
                                      (Cast
                                       (RefType
                                        (classRef [(Ident "Just"
                                                  ,[ActualType$ jtype @lhs.ty])]))
                                       (varAccess "v")) (Ident "just_value"))]))

-- | add proxy or not
sem Get
  | Nothing   lhs.args       = [] -- no proxy to method invocation.
              lhs.fparam     = [] -- no extra argument to abstract method
              lhs.initProxy  = []
              lhs.proxyClass = []
              lhs.destrProxy = []
  | Just      lhs.args       = [varAccess @loc.vName] -- passed to dev's implementationy
              loc.proxyType  = Just (RefType (jtype.fromJust $ lookup @just @lhs.tyEnv))
              loc.vName      = "local" ++ @just ++ "Proxy"
              loc.proxyName  = @just ++ "Proxy"
              lhs.initProxy  = proxyOn  @loc.proxyName @loc.vName
              lhs.destrProxy = proxyOff @loc.proxyName @loc.vName
              lhs.proxyClass = [proxyClGet @just @loc.proxyName @loc.proxyType]
              lhs.fparam     = [(classRef [(Ident @loc.proxyName,[])], @loc.vName)]

